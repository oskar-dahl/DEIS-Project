classdef sensorData < robotics.ros.Message
    %sensorData MATLAB implementation of robot_msgs/sensorData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_msgs/sensorData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'f441f79470fb78bf478776c0a3cc20b1' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        IRLeft
        IRCenter
        IRRight
        EncLeft
        EncRight
    end
    
    properties (Constant, Hidden)
        PropertyList = {'EncLeft', 'EncRight', 'IRCenter', 'IRLeft', 'IRRight'} % List of non-constant message properties
        ROSPropertyList = {'EncLeft', 'EncRight', 'IRCenter', 'IRLeft', 'IRRight'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = sensorData(msg)
            %sensorData Construct the message object sensorData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function irleft = get.IRLeft(obj)
            %get.IRLeft Get the value for property IRLeft
            irleft = int32(obj.JavaMessage.getIRLeft);
        end
        
        function set.IRLeft(obj, irleft)
            %set.IRLeft Set the value for property IRLeft
            validateattributes(irleft, {'numeric'}, {'nonempty', 'scalar'}, 'sensorData', 'IRLeft');
            
            obj.JavaMessage.setIRLeft(irleft);
        end
        
        function ircenter = get.IRCenter(obj)
            %get.IRCenter Get the value for property IRCenter
            ircenter = int32(obj.JavaMessage.getIRCenter);
        end
        
        function set.IRCenter(obj, ircenter)
            %set.IRCenter Set the value for property IRCenter
            validateattributes(ircenter, {'numeric'}, {'nonempty', 'scalar'}, 'sensorData', 'IRCenter');
            
            obj.JavaMessage.setIRCenter(ircenter);
        end
        
        function irright = get.IRRight(obj)
            %get.IRRight Get the value for property IRRight
            irright = int32(obj.JavaMessage.getIRRight);
        end
        
        function set.IRRight(obj, irright)
            %set.IRRight Set the value for property IRRight
            validateattributes(irright, {'numeric'}, {'nonempty', 'scalar'}, 'sensorData', 'IRRight');
            
            obj.JavaMessage.setIRRight(irright);
        end
        
        function encleft = get.EncLeft(obj)
            %get.EncLeft Get the value for property EncLeft
            encleft = int32(obj.JavaMessage.getEncLeft);
        end
        
        function set.EncLeft(obj, encleft)
            %set.EncLeft Set the value for property EncLeft
            validateattributes(encleft, {'numeric'}, {'nonempty', 'scalar'}, 'sensorData', 'EncLeft');
            
            obj.JavaMessage.setEncLeft(encleft);
        end
        
        function encright = get.EncRight(obj)
            %get.EncRight Get the value for property EncRight
            encright = int32(obj.JavaMessage.getEncRight);
        end
        
        function set.EncRight(obj, encright)
            %set.EncRight Set the value for property EncRight
            validateattributes(encright, {'numeric'}, {'nonempty', 'scalar'}, 'sensorData', 'EncRight');
            
            obj.JavaMessage.setEncRight(encright);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.IRLeft = obj.IRLeft;
            cpObj.IRCenter = obj.IRCenter;
            cpObj.IRRight = obj.IRRight;
            cpObj.EncLeft = obj.EncLeft;
            cpObj.EncRight = obj.EncRight;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.IRLeft = strObj.IRLeft;
            obj.IRCenter = strObj.IRCenter;
            obj.IRRight = strObj.IRRight;
            obj.EncLeft = strObj.EncLeft;
            obj.EncRight = strObj.EncRight;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.IRLeft = obj.IRLeft;
            strObj.IRCenter = obj.IRCenter;
            strObj.IRRight = obj.IRRight;
            strObj.EncLeft = obj.EncLeft;
            strObj.EncRight = obj.EncRight;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_msgs.sensorData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_msgs.sensorData;
            obj.reload(strObj);
        end
    end
end
