classdef odometryData < robotics.ros.Message
    %odometryData MATLAB implementation of robot_msgs/odometryData
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2018 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'robot_msgs/odometryData' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = '35f9b723f07a0124706fa5052633374b' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        PosX
        PosY
        PosA
    end
    
    properties (Constant, Hidden)
        PropertyList = {'PosA', 'PosX', 'PosY'} % List of non-constant message properties
        ROSPropertyList = {'PosA', 'PosX', 'PosY'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = odometryData(msg)
            %odometryData Construct the message object odometryData
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function posx = get.PosX(obj)
            %get.PosX Get the value for property PosX
            posx = int32(obj.JavaMessage.getPosX);
        end
        
        function set.PosX(obj, posx)
            %set.PosX Set the value for property PosX
            validateattributes(posx, {'numeric'}, {'nonempty', 'scalar'}, 'odometryData', 'PosX');
            
            obj.JavaMessage.setPosX(posx);
        end
        
        function posy = get.PosY(obj)
            %get.PosY Get the value for property PosY
            posy = int32(obj.JavaMessage.getPosY);
        end
        
        function set.PosY(obj, posy)
            %set.PosY Set the value for property PosY
            validateattributes(posy, {'numeric'}, {'nonempty', 'scalar'}, 'odometryData', 'PosY');
            
            obj.JavaMessage.setPosY(posy);
        end
        
        function posa = get.PosA(obj)
            %get.PosA Get the value for property PosA
            posa = int32(obj.JavaMessage.getPosA);
        end
        
        function set.PosA(obj, posa)
            %set.PosA Set the value for property PosA
            validateattributes(posa, {'numeric'}, {'nonempty', 'scalar'}, 'odometryData', 'PosA');
            
            obj.JavaMessage.setPosA(posa);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.PosX = obj.PosX;
            cpObj.PosY = obj.PosY;
            cpObj.PosA = obj.PosA;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.PosX = strObj.PosX;
            obj.PosY = strObj.PosY;
            obj.PosA = strObj.PosA;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.PosX = obj.PosX;
            strObj.PosY = obj.PosY;
            strObj.PosA = obj.PosA;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.robot_msgs.odometryData.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.robot_msgs.odometryData;
            obj.reload(strObj);
        end
    end
end
